<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout Page</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <%- include("../partials/user/profileHead") %>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f8f8f8;
        }
        .container {
            display: flex;
            justify-content: space-between;
            max-width: 1200px;
            margin: 0 auto;
        }
        .shipping-address, .order-summary {
            width: 48%;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .product-image {
            width: 80px;
            height: 80px;
        }
        .product-details {
            display: flex;
            margin-bottom: 20px;
        }
        .product-info {
            margin-left: 20px;
        }
        .total {
            font-size: 1.2em;
            font-weight: bold;
        }
        .coupon-form {
            display: flex;
            margin-top: 20px;
        }
        .coupon-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px 0 0 4px;
        }
        .apply-button {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 0 4px 4px 0;
        }
        .remove-coupon {
            background-color: #ccc;
            color: #000;
            border: none;
            padding: 10px;
            margin-left: 10px;
            cursor: pointer;
            border-radius: 4px;
        }
        .available-coupons {
            border: 1px solid #ccc;
            padding: 15px;
            margin-top: 20px;
            border-radius: 4px;
        }
        .coupon-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .copy-button {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 5px 15px;
            cursor: pointer;
            border-radius: 4px;
        }
        .payment-methods {
            margin-top: 30px;
       padding: 25px;
       border: 1px solid #e0e0e0;
       border-radius: 10px;
       background: #f9f9f9;
       box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .payment-option {
            margin-bottom: 10px;
        }
        .warning {
            color: #ff0000;
            font-size: 0.9em;
        }
        .place-order-button {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 15px;
            width: 100%;
            font-size: 1.1em;
            cursor: pointer;
            border-radius: 4px;
            margin-top: 20px;
        }
        .shipping-address, .order-summary {
            width: 48%;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* New address card styles */
        .address-card {
            background: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            position: relative;
            transition: all 0.3s ease;
        }

        .address-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .address-card.selected {
            border: 2px solid #007bff;
        }

        .address-card label {
            display: block;
            margin: 0;
            cursor: pointer;
        }

        .address-card input[type="radio"] {
            margin-right: 10px;
            vertical-align: top;
            margin-top: 5px;
        }

        .address-content {
            display: inline-block;
        }

        .address-name {
            font-size: 1.1em;
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }

        .address-details {
            color: #666;
            margin-bottom: 5px;
            line-height: 1.4;
        }

        .address-phone {
            color: #666;
            margin-top: 8px;
        }

        .add-address-btn {
            display: inline-block;
            margin-top: 16px;
            padding: 10px 20px;
            background-color: #dc3545;
            color: rgb(246, 246, 246); 
            text-decoration: none;
            border-radius: 4px;
            font-size: 14px;
            font-weight: bold;
            text-align: center;
        }

        .add-address-btn:hover {
            background-color: #dc3545;
        }

         /* Coupon Section Styling */
    .coupon-section {
        margin: 20px 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    #showCouponsBtn {
        background-color: #1a73e8;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-bottom: 15px;
        transition: background-color 0.2s;
    }

    #showCouponsBtn:hover {
        background-color: #1557b0;
    }

    .cart-discount {
        margin: 15px 0;
    }

    #couponForm .input-group {
        display: flex;
        gap: 8px;
        margin-bottom: 15px;
    }

    #coupon-code {
        flex: 1;
        padding: 10px 12px;
        border: 2px solid #e0e0e0;
        border-radius: 4px;
        font-size: 14px;
        transition: border-color 0.2s;
    }

    #coupon-code:focus {
        outline: none;
        border-color: #1a73e8;
    }

    .btn-outline-primary-2 {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
        background-color: #1a73e8;
        color: white;
    }

    .btn-outline-primary-2:hover {
        background-color: #1557b0;
    }

    #removeCoupon {
        background-color: #dc3545;
    }

    #removeCoupon:hover {
        background-color: #bb2d3b;
    }

    #removeCoupon:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
        color: #6c757d;
    }

    /* Available Coupons Section */
    .available-coupons {
        margin-top: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
    }

    .available-coupons h3 {
        color: #1a73e8;
        font-size: 16px;
        margin-bottom: 15px;
    }

    .coupon-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        margin-bottom: 10px;
        background-color: #f8f9fa;
    }

    .coupon-item strong {
        color: #1a73e8;
        font-size: 14px;
        display: block;
        margin-bottom: 4px;
    }

    .coupon-item p {
        color: #6c757d;
        font-size: 12px;
        margin: 0;
    }

    .copy-button {
        background-color: #1a73e8;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: background-color 0.2s;
    }

    .copy-button:hover {
        background-color: #1557b0;
    }

    /* Error Message Styling */
    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 4px;
    }

    /* Success Message Styling */
    .success-message {
        color: #28a745;
        font-size: 12px;
        margin-top: 4px;
    }

        


    /* Error Message Styling */
    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 4px;
    }

    /* Success Message Styling */
    .success-message {
        color: #28a745;
        font-size: 12px;
        margin-top: 4px;
    }


    /* Modal Styles */
    .modal {
    display: none;
    position: fixed;
    z-index: 999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 20px;
    border-radius: 8px;
    width: 60%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    animation: fadeIn 0.3s ease-in-out;
    }

    @keyframes slideIn {
        from { transform: translateY(-100px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
    }

    .modal-header h3 {
    margin: 0;
    font-size: 1.5em;
    color: #333;
    }

    .modal-body {
        padding: 20px;
        max-height: 60vh;
        overflow-y: auto;
    }

    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.2s;
    }

    .close:hover {
        color: #555;
    }

    #showCouponsButton {
        width: 100%;
        margin-top: 10px;
        background-color: #1a73e8;
        color: white;
    }

    #showCouponsButton:hover {
        background-color: #1557b0;
    }

    /* Coupon Items in Modal */
    .coupon-item {
        background-color: #f8f9fa;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: transform 0.2s;
    }

    .coupon-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .coupon-details {
        flex-grow: 1;
    }

    .coupon-code {
        font-size: 16px;
        font-weight: bold;
        color: #1a73e8;
        margin-bottom: 5px;
    }

    .coupon-description {
        color: #666;
        font-size: 14px;
        margin-bottom: 5px;
    }

    .coupon-expiry {
        color: #dc3545;
        font-size: 12px;
    }

    .copy-button {
        background-color: #1a73e8;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s;
        margin-left: 15px;
    }

    .copy-button:hover {
        background-color: #1557b0;
    }

    .modal-header .close {
    font-size: 1.8em;
    font-weight: bold;
    color: #999;
    cursor: pointer;
}

.modal-header .close:hover {
    color: #000;
}

.modal-body {
    padding-top: 15px;
    max-height: 400px;
    overflow-y: auto;
}

/* Coupon Table */
.table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.table th, 
.table td {
    padding: 12px;
    border: 1px solid #ddd;
    text-align: center;
}

.table th {
    background-color: #f4f4f4;
    font-weight: bold;
}

.table td .copy-btn {
    background-color: #28a745;
    color: #fff;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9em;
}

.table td .copy-btn:hover {
    background-color: #218838;
}

/* Payment Section */
.payment-methods {
    margin-top: 30px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fafafa;
}

.payment-methods h3 {
    font-size: 1.5em;
    font-weight: 600;
    color: #333;
    margin-bottom: 20px;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
}

.payment-option {
    margin-bottom: 15px;
    font-size: 1.2em;
    display: flex;
    align-items: center;
}

.payment-option input[type="radio"] {
    margin-right: 10px;
    transform: scale(1.2);
    cursor: pointer;
}

.payment-option label {
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: 1em;
    color: #555;
}

.payment-option span.warning {
    margin-left: 10px;
    color: #d9534f;
    font-size: 0.9em;
    display: block;
    font-weight: bold;
}

/* Place Order Button */
#placeOrderBtn {
    width: 100%;
    padding: 15px;
    font-size: 1.3em;
    font-weight: bold;
    border: none;
    border-radius: 8px;
    background-color: #007bff;
    color: #fff;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
}

#placeOrderBtn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    box-shadow: none;
}

#placeOrderBtn:hover:not(:disabled) {
    background-color: #0056b3;
    box-shadow: 0 6px 12px rgba(0, 123, 255, 0.3);
}

/* Coupon Input Field */
#coupon-code {
    width: 80%;
    padding: 10px;
    font-size: 1.1em;
    border: 1px solid #ddd;
    border-radius: 5px;
}

#applyCoupon, #removeCoupon {
    padding: 10px 15px;
    border: none;
    font-size: 1em;
    cursor: pointer;
    border-radius: 5px;
    margin-left: 5px;
}

#applyCoupon {
    background-color: #28a745;
    color: #fff;
}

#removeCoupon {
    background-color: #dc3545;
    color: #fff;
}

#applyCoupon:hover {
    background-color: #218838;
}

#removeCoupon:hover {
    background-color: #c82333;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Responsive Design */
@media screen and (max-width: 768px) {
    .modal-content {
        width: 90%;
    }

    #coupon-code {
        width: 70%;
    }

    #applyCoupon, #removeCoupon {
        width: 20%;
        padding: 10px 0;
    }

    .payment-methods {
        padding: 15px;
    }
}






    </style>
</head>
<body>
    <div class="container">
        <div class="shipping-address">
            <h2 class="mb-4">Select Shipping Address</h2>
            <% if(address.length > 0) { %>
                <div class="address-list">
                    <% address.forEach(addr => { %>
                        <div class="address-card <%= addr.isDefault ? 'selected' : '' %>">
                            <label>
                                <input 
                                    type="radio" 
                                    name="selectedAddress" 
                                    value="<%= addr._id %>"
                                    <%= addr.isDefault ? 'checked' : '' %>
                                >
                                <div class="address-content">
                                    <div class="address-name"><%= addr.address_name %></div>
                                    <div class="address-details">
                                        <%= addr.house_name %>,
                                        <%= addr.street_address %>,
                                        <%= addr.city %>,
                                        <%= addr.state %>,
                                        <%= addr.pincode %>
                                    </div>
                                </div>
                            </label>
                        </div>
                    <% }) %>
                </div>
            <% } else { %>
                <p class="text-muted">No Shipping addresses available.</p>
            <% } %>
            <a href="/userAddress" class="add-address-btn">+ Add Address</a>

        </div>
        <div class="order-summary">
            

            <h2>Order Summary</h2>
            <% if (cart.length === 0) { %>
                <div class="alert alert-info">
                    Your checkout page is empty. Please add items to your cart to proceed.
                </div>

                <% } else { %>

            <% if (blockedProducts.length > 0) { %>
                <div class="alert alert-warning">
                    Some products in your cart are blocked by the admin and cannot be purchased.
                </div>
                <ul class="list-group">
                    <% blockedProducts.forEach(item => { %>
                        <li class="list-group-item">
                            <strong><%= item.productId.productName %></strong>
                            <p>Blocked by admin</p>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>

            <% let totalAmount=0; %>
            <% cart.forEach(item => {%>
            <div class="product-details">
                <img src="/uploads/re-image/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="product-image">
                <div class="product-info">
                    <h3><%= item.productId.productName %></h3>
                    <p>Quantity: <%= item.quantity %></p>
                    <p>Price: ₹<%= item.productId.salePrice %></p>
                    <p>Color:  <%= item.productId.colorStock[0].color %></p>
                   
                  
                </div>
               
            </div>
            
            <% totalAmount += item.productId.salePrice * item.quantity %>
            <% }) %>
        <p class="total" id="total">Total Amount: ₹<%= subTotal|| totalAmount.toFixed(2) %></p>
        <p class="discount" id="discount">Discount: ₹<%= couponDiscount ||discountAmount.toFixed(2) %></p> 
        <p class="grand-total" id="grand-total">Grand Total: ₹<%= subTotal - couponDiscount %></p>  
         <script>
            let totalValue = '<%= totalAmount %>'
          
            
         </script>

        <% cart.forEach(function(item,index) { %>
            <input type="hidden" name="cartItems[<%= index %>][productId]" value="<%= item.productId.productName %>">
                <input type="hidden" name="cartItems[<%= index %>][quantity]" value="<%= item.quantity %>">
                <input type="hidden" name="cartItems[<%= index %>][size]" value="<%= item.productId.colorStock%>">
                <input type="hidden" name="cartItems[<%= index %>][price]" value="<%= item.productId.salesPrice%>">

            <% })%>

            <input type="hidden" id="user-id" value="<%=user._id %>">
            <aside class="col-lg-12">
                <!-- Coupon section HTML -->
                <div class="cart-discount">
                    <form id="couponForm">
                        <div class="input-group">

                            <input
                                type="text"
                                id="coupon-code"
                                class="form-control"
                                required
                                placeholder="Enter coupon code"
                                value="<%= appliedCoupon %>"
                            />

                             <input 
                type="hidden" 
                id="coupon-id" 
                name="couponId" 
                value="<% coupons._id %>"
            />
                            
                            <div class="input-group-append">
                                
                                <button
                                    id="applyCoupon"
                                    class="btn btn-outline-primary-2"
                                    type="button"
                                >
                                    Apply
                                </button>
                            </div>
                            <div class="input-group-append">
                                <button
                                    id="removeCoupon"
                                    class="btn btn-outline-primary-2"
                                    type="button"
                                    disabled
                                >
                                    Remove
                                </button>
                            </div>
                        </div>
                    </form>
                    <!-- Add Show Coupons Button -->
                    <button id="showCouponsButton" class="btn btn-outline-primary-2">
                        Show Available Coupons
                    </button>
                </div>
                
                <!-- Modal for Available Coupons -->
                <div id="couponsModal" class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3>Available Coupons</h3>
                            <span class="close">&times;</span>
                        </div>
                        <div class="modal-body">
                            <div class="available-coupons">
                               <%if(coupons && coupons.length > 0) { %>
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Coupon Code</th>
                                            <th>Minimum DiscountValue</th>
                                            <th>Expiry Date</th>
                                            <th>Minimum purcahse Amount</th>
                                            <th>Conditions</th>
                                           
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% coupons.forEach(coupon => { %>
                                        <tr>
                                            <td><%= coupon.code %></td>
                                            <td><%= coupon.minDiscountValue %></td>
                                            <td class="getExpiryClass"><%= new Date(coupon.expiryDate).toLocaleDateString() %></td>
                                            <td><%= coupon.minPurchaseAmount %></td>
                                            <td><%= coupon.conditions%></td>
                                            <td>
                                                <button class="copy-btn" 
                                                data-id="<%= coupon._id %>" 
                                                data-coupon="<%=coupon.code%>">
                                                    <i class="fas fa-copy"></i> Copy
                                                </button>
                                            </td>

                                        </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                                <%} else {%>
                                    <tr>
                                        <td colspan="6">No coupons available at the moment.</td>

                                    </tr>
                                    <% } %>
                            </div>
                        </div>
                    </div>
                </div>



                <input type="hidden" id="applied-coupon-code" value="">
                <input type="hidden" id="applied-coupon-discount" value="0">
                <input type="hidden" id="original-total" value="<%= totalAmount %>">
                <input type="hidden" id="wallet-balance" value="<%= wallet ? wallet.walletBalance : 0 %>">





            <div class="payment-methods">
                <h3>Select Payment Methods</h3>
                <div class="payment-option">
                    <label>
                        <input type="radio" id="cod"name="paymentMethod" value="COD">
                        Cash on Delivery
                    </label>
                    
                </div>
                <div class="payment-option">
                    <label>
                        <input type="radio" id="razorpay"name="paymentMethod" value="Razorpay">
                        Razorpay
                       
                    </label>
                </div>
                <div class="payment-option">
                    <label>
                        <input type="radio" id="wallet" name="paymentMethod" value="Wallet">
                        Wallet  (Available: ₹<%= wallet ? wallet.walletBalance : 0 %>)
                       
                        
                    </label>
                    <span class="warning"></span>
                </div>
            </div>
            
            <button 
                id="placeOrderBtn" 
                class="btn btn-primary btn-block"
                
            >
                Place Order
            </button>

            <% } %>
        </div>

        <% } %>
   

    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
        
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




<script>

    




document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('couponsModal');
    const showCouponsButton = document.getElementById('showCouponsButton');
    const closeButton = document.querySelector('.close');
    const couponInput = document.getElementById('coupon-code');
    const availableCouponsContainer = document.querySelector('.available-coupons');

    // Show modal
    showCouponsButton.onclick = function() {
        modal.style.display = "block";
        loadAvailableCoupons();
    }

    // Close modal
    closeButton.onclick = function() {
        modal.style.display = "none";
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    // Load available coupons
    const loadAvailableCoupons =  () => {
        

       
          
            
            
            if (coupons && coupons.length > 0) {
                const couponsList = coupons.map(coupon => `
                    <div class="coupon-item">
                        <div class="coupon-details">
                            <div class="coupon-code">${coupon.code}</div>
                            <div class="coupon-description">${coupon.description}</div>
                            <div class="coupon-expiry">Expires: ${new Date(coupon.expiryDate).toLocaleDateString()}</div>
                            <div class="coupon-discount">Discount: ${coupon.discountAmount}%</div>
                        </div>
                        <button class="copy-button" data-code="${coupon.code}">
                            Copy Code
                        </button>
                    </div>
                `).join('');
                
                availableCouponsContainer.innerHTML = couponsList;
            } else {
                availableCouponsContainer.innerHTML = '<p>No coupons available at the moment.</p>';
            }
       
    };

    // Handle copying coupon codes
    availableCouponsContainer.addEventListener('click', (event) => {
        if (event.target.classList.contains('copy-btn')) {
            const couponCode = event.target.dataset.coupon;
            const couponId = event.target.getAttribute('data-id'); // Get coupon ID;
            
            couponInput.value = couponCode;
            modal.style.display = "none";


           

            
            // Optional: Show a success message
            Swal.fire({
                icon: 'success',
                title: 'Coupon Copied!',
                text: 'Coupon code has been copied to the input field.',
                timer: 2000,
                showConfirmButton: false
            });


           
        }
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const couponInput = document.getElementById('coupon-code');
    const applyButton = document.getElementById('applyCoupon');
    const removeButton = document.getElementById('removeCoupon');
    const subtotalElement = document.getElementById('total');
    const grandTotalElement = document.getElementById('grand-total');
    
    const userId = '<%= userId %>'; 
    const originalTotal = parseFloat(document.getElementById('original-total').value);
    const walletBalance = parseFloat(document.getElementById('wallet-balance').value);
    let appliedDiscount = 0;

    const appliedcoupons = '<%= appliedCoupon%>'
    const subtotalAmounts ='<%= subTotal %>'
    const couponDiscounts ='<%= couponDiscount %>'
    const grandTotals ='<%= subTotal -couponDiscount %>'

    console.log(appliedcoupons,"appliedcoupon");
    console.log(subtotalAmounts,"subtotalAmount");
    console.log(couponDiscounts,"coupondiscount");
    console.log(grandTotals,"grandtotal amount")
  
  
   

    

  

   
    function updatePaymentAmounts(grandTotal) {
        document.getElementById('cod-amount').textContent = grandTotal.toFixed(2);
        document.getElementById('razorpay-amount').textContent = grandTotal.toFixed(2);
        document.getElementById('wallet-amount').textContent = grandTotal.toFixed(2);
        
        // Check wallet balance
        if (grandTotal > walletBalance) {
            document.getElementById('wallet-warning').textContent = 'Insufficient wallet balance';
            document.getElementById('wallet').disabled = true;
        } else {
            document.getElementById('wallet-warning').textContent = '';
            document.getElementById('wallet').disabled = false;
        }
    }
    

    // Apply coupon on button click
    applyButton.addEventListener('click', async () => {
        const couponCode = couponInput.value.trim();
        const subTotal = totalValue

        if (!couponCode) {
            Swal.fire({
                icon: "warning",
                title: "Coupon Code Required",
                text: "Please enter a coupon code before applying!",
                confirmButtonText: "Okay",
                timer: 3000,
            });
            return;
        }

        try {
            const response = await fetch('/apply-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                     couponCode,
                      subTotal: originalTotal,
                       userId })
            });

            const result = await response.json();

            if (response.ok) {
                const discountAmount = Math.round(result.discountAmount);
                const newGrandTotal = Math.round(subTotal - discountAmount);

                // Update the UI with the new values
                document.getElementById('discount').innerText = `₹ -${discountAmount.toFixed(2)}`;
                grandTotalElement.innerText = `₹ ${newGrandTotal.toFixed(2)}`;

                

                Swal.fire({
                    icon: "success",
                    title: "Coupon Applied",
                    text: `Coupon "${result.couponsCode}" applied successfully!`,
                    confirmButtonText: "Awesome!",
                });

                applyButton.disabled = true;
                removeButton.disabled = false;
                couponInput.disabled = true;

            } else {
                Swal.fire({
                    icon: "error",
                    title: "Failed to Apply Coupon",
                    text: result.message || "Something went wrong!",
                    confirmButtonText: "Try Again",
                });
            }

        } catch (error) {
            console.error('Error applying coupon:', error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Something went wrong! Please try again later.",
                confirmButtonText: "Okay",
            });
        }
    });


    
removeButton .addEventListener('click',async()=>{

   const couponCode = couponInput.value.trim();
    

    try {
        const response = await fetch('/removeCoupons',{
            method: 'POST',
            headers:{
                'Content-Type':'application/json'
            },
            body:JSON.stringify({couponCode})
        });

        const result = await response.json();

        if(response.ok) {
            discountAmount =0;

            document.getElementById('discount').innerText = '₹0.00';

            const subTotal = parseFloat(document.getElementById('total').innerText.replace('Total Amount: ₹', '').trim());
            const newGrandTotal = subTotal;

            document.getElementById('grand-total').innerText = `₹ ${newGrandTotal.toFixed(2)}`; 


           Swal.fire({

            icon:"success",
            title:"Coupon Removed",
            text: "Your coupon has been successfully removed",
            confirmButtonText: "Okay",
           });

           applyButton.disabled= false;
           removeButton.disabled=true;
           couponInput.disabled = false;
           couponInput.value ="";
        } else {
            Swal.fire({
                icon: "error",
                title: "Failed to Remove Coupon",
                text: result.message || "Something went wrong!",
                confirmButtonText: "Try Again",
            });
        } 
        
    } catch (error) {
        console.error("Error removing coupon:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong! Please try again later.",
            confirmButtonText: "Okay",
        });
        
    }
})




});







    console.log('totalAmount',totalValue);
    

        
    document.addEventListener('DOMContentLoaded', () => {
    const placeOrderBtn = document.getElementById('placeOrderBtn');
    

    placeOrderBtn.addEventListener('click', async () => {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

        



        const couponInput = document.getElementById("coupon-code").value
        const userId = '<%= userId %>'; 
        alert(selectedPaymentMethod)


        const grandTotal = document.getElementById('grand-total').innerText.replace('₹', '').trim();
       const discountAmount = document.getElementById('discount').innerText.replace('₹ -', '').trim() || 0;


       console.log(grandTotal,"grandtotal in the paymnet")
       const subTotal = grandTotal - discountAmount


           
       
       const applyButton = document.getElementById('applyCoupon');
       const removeButton = document.getElementById('removeCoupon');

       const subtotalElement = document.getElementById('total');
       const grandTotalElement = document.getElementById('grand-total');
    

   
    const originalTotal = parseFloat(document.getElementById('original-total').value);
    const walletBalance = parseFloat(document.getElementById('wallet-balance').value);
    let appliedDiscount = 0;



    
    const appliedcoupons = '<%= appliedCoupon%>'
    const subtotalAmounts ='<%= subTotal %>'
    const couponDiscounts ='<%= couponDiscount %>'
    const grandTotals ='<%= subTotal -couponDiscount %>'

  

        



         
        // Validate selections
        if (!selectedAddress) {
            Swal.fire({
                icon: 'warning',
                title: 'Oops...',
                text: 'Please select a shipping address',
            });
            return;
        }

        if (!selectedPaymentMethod) {
            Swal.fire({
                icon: 'warning',
                title: 'Oops...',
                text: 'Please select a payment method',
            });
            return;
        }

        alert(`Selected Payment Method: ${selectedPaymentMethod.value}`);

       


        const paymentMethod = selectedPaymentMethod.value;
        

        const cartItems = [];
        '<% cart.forEach((item) => { %>'
            cartItems.push({
                productId: "<%= item.productId._id %>",
                quantity: '<%= item.quantity %>',
                price: '<%= item.productId.salePrice %>',
                color: "<%= item.productId.colorStock[0].color %>"
            });
        '<% }) %>';

        

        // Show confirmation dialog
        const result = await Swal.fire({
            title: 'Confirm Order',
            text: 'Are you sure you want to place this order?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, Place Order',
            cancelButtonText: 'No, Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33'
        });

        if(!result.isConfirmed){
            Swal.fire('Cancelled', 'Your order could not be placed');
            return
        }
        if (paymentMethod === 'COD' && grandTotals > 1000) {
   
   
             
            
        Swal.fire({
            icon: 'error',
            title: 'COD Not Available',
            text: 'Cash on Delivery is not available for orders above ₹1000.',
        });
        return; 
    


       
    
    try {
        const response = await fetch("/place-order", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                selectedAddress: selectedAddress.value,
                paymentMethod: paymentMethod,
                couponInput: couponInput,
                userId: userId,
                grandTotal: grandTotals-parseFloat(couponDiscounts),
                 subTotal:subtotalAmounts,
               discountAmount:parseFloat(discountAmount) || parseFloat(couponDiscounts)||0,
                originalTotal:originalTotal,
                 walletBalance:walletBalance,
                 cartItems:cartItems,
                 subTotal:subTotal,
                 grandTotal: grandTotal - parseFloat(discountAmount),
                
            })
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Order Placed',
                text: 'Your order has been placed successfully',
                timer: 3000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = '/orderSuccess';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Something went wrong. Please try again.',
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Order Failed',
            text: error.message || 'Something went wrong while placing the order.',
        });
    }
        } else if(paymentMethod==='Razorpay'){

            
            try {

               
                const grandTotal = document.getElementById('grand-total').innerText.replace('₹', '').trim();
                const discountAmount = document.getElementById('discount').innerText.replace('₹ -', '').trim() || 0;
               
                

                console.log(grandTotal,discountAmount,"this is the discount amount and the grand total in the razorpay")

                const response = await fetch("/create-razorpay-order",{
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/json'
                    },
                    body:JSON.stringify({
                        amount: totalValue,
                     currency: 'INR',
                     selectedAddress: selectedAddress.value,
                     couponInput: couponInput,
                   
                     discountAmount: parseFloat(discountAmount) || parseFloat(couponDiscounts)||0,
                     grandTotal: grandTotal - parseFloat(discountAmount) || parseInt(grandTotals - couponDiscounts),
                     originalTotal: originalTotal || parseInt(grandTotals),
                     cartItems: cartItems,



                       
                    })
                })

                const data = await response.json();

                if(!response.ok) {
                    throw new Error(data.message || "Failed to create order")
                }

                if(data.order_id){
                    const razorpayOptions = {
                        key:data.RAZORPAY_KEYID,
                        amount:data.amount,
                        currency: data.currency,
                        name:"WristStyle",
                        description:"Order Payment",
                        order_id: data.order_id,
                        handler:async function(response){
                            try {
                                const verifyResponse = await fetch("/verify-payment",{
                                    method: "POST",
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature,
                                        selectedAddress:selectedAddress.value,
                                        paymentMethod:paymentMethod,
                                        amount: parseFloat(grandTotal),
                                        discountAmount:parseFloat(discountAmount),
                                       
                                        couponInput: couponInput,
                                         grandTotal: grandTotal - parseFloat(discountAmount),
                                        
                                    })
                                });
                              
                                const verifyData = await verifyResponse.json();

                                if (!verifyResponse.ok) {
                                    alert('failer paym')
                                    throw new Error(verifyData.message || 'Payment verification failed');
                                }

                                
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Payment Successful',
                                    text: 'Your payment has been verified successfully',
                                    timer: 3000,
                                    showConfirmButton: false
                                });

                                window.location.href = "/orderSuccess";
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Verification Error',
                                    text: error.message || 'Something went wrong while verifying payment'
                                });
                            }
                        },
                        prefill: {
                            name: data.customerName,    // Add customer details from backend
                            email: data.customerEmail,
                            contact: data.customerPhone
                        },
                        theme: {
                            color: "#3399cc"
                        }
                    };

                    const rzp = new Razorpay(razorpayOptions);
                    rzp.open();



                    // for failure:-


                    rzp.on('payment.failed', function(response){

                        console.error('Payment faild..!', response.error)
                            Swal.fire({
                                icon: 'error',
                                 title: 'Payment Failed',
                                text: `Reason: ${response.error.description}`,
                                 footer: 'Please try again or choose a different payment method.'
                            })

                            const paymentId = response.error?.metadata?.payment_id || "Missing Payment ID";
                            const orderId = response.error?.metadata?.order_id || "Missing Order ID";
                            const signature = response.error?.metadata?.signature || "Missing razor pay signature";

                        
                        fetch('/failedOrder',{
                            method:'POST',
                            headers:{
                                'Content-Type': 'application/json'
                            },

                            body: JSON.stringify({

                                razorpay_order_id: response?.razorpay_order_id || '',
                                razorpay_payment_id: response?.razorpay_payment_id || '',
                                razorpay_signature: response?.razorpay_signature || '',
                                selectedAddress:selectedAddress.value,
                                paymentMethod:paymentMethod,
                                amount:totalValue,
                                cartItems:cartItems,
                                discountAmount:parseFloat(discountAmount) || parseFloat(couponDiscounts)||0,
                                couponInput: couponInput,
                                grandTotal: grandTotal - parseFloat(discountAmount) || parseInt(grandTotals - couponDiscounts)



                            })
                        })
                        .then(res=>res.json())
                        .then(saveResponse=>{

                            if(saveResponse.status === "ok") {
                                Swal.fire({
                                    icon:'info',
                                    title: 'Payment Failed',
                                    text:'Order saved with failed payment status. Please try again',
                                    confirmButtonText: 'OK'
                                }).then((result)=>{
                                    if(result.isConfirmed){
                                        window.location.replace('/placeOrder')
                                    }
                                })
                            } else {
                                Swal.fire({
                                            icon: 'error',
                                            title: 'Order Save Failed',
                                            text: saveResponse.error
                                        });
                            }
                        })
                        .catch(error =>{
                            console.error('Error saving failed order:',error);
                            Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Could not save order details. Please contact support.'
                                    });
                        })
                    })


                    
                } else{

                    Swal.fire({
                            icon: 'error',
                            title: 'Order Creation Failed',
                            text: data.error
                        })

                }
            } catch (error) {
                console.error('Error creating Razorpay order:', error);

                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: error.message || 'Something went wrong while placing the order'
                });
            }
        } else {
            alert(paymentMethod)
             try {
                const response = await fetch("/place-order",{
                    method:"POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        selectedAddress: selectedAddress.value,
                        paymentMethod: paymentMethod,
                        amount: totalValue,
                        couponInput:couponInput,  
                       discountAmount: parseFloat(discountAmount) || parseFloat(couponDiscounts)||0,
                       grandTotal: grandTotal - parseFloat(discountAmount) || parseInt(grandTotals - couponDiscounts),
                       originalTotal: originalTotal || parseInt(grandTotals),
                    })
                });
                const data = await response.json();

                if(response.ok){
                    Swal.fire({
                        icon:'success',
                        title:'Order Placed',
                        text:'Your order has been successfully placed',
                        timer: 3000,
                        showConfirmButton: false
                    }).then(()=>{
                        window.location.href ='/orderSuccess'
                    })
                } else {
                    Swal.fire({
                      icon:'error',
                      title:'Payment Error',
                      text:data.message || 'Insufficient wallet balance or something went wrong.Please try again '

                    })
                }
                
             } catch (error) {
                Swal.fire({
                   
                    icon:'error',
                    title:'Order failed',
                    text:error.message || 'Something went wrong'
                })
                
             }
        }
    });
});




    </script>


<%include("../partials/mainfooter")%>