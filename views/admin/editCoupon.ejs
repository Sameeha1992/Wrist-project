
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Coupon Page</title>
    
    <style>
        :root {
            --primary-color: #6200ee;
            --primary-light: #bb86fc;
            --background-color: #f5f5f5;
            --card-background: #ffffff;
            --text-color: #333333;
            --error-color: #b00020;
            --success-color: #03dac6;
            --border-radius: 8px;
            --transition-speed: 0.3s;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
        }

        .card {
            background-color: var(--card-background);
            border-radius: var(--border-radius);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            transition: box-shadow var(--transition-speed);
        }

        .card:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        h1 {
            color: var(--primary-color);
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
            font-weight: 500;
        }

        input, select, textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ccc;
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: border-color var(--transition-speed);
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--primary-light);
            box-shadow: 0 0 0 2px rgba(98, 0, 238, 0.2);
        }

        textarea {
            min-height: 100px;
            resize: vertical;
        }

        .error-message {
            color: var(--error-color);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
        }

        button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--border-radius);
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color var(--transition-speed), transform var(--transition-speed);
        }

        button:hover {
            transform: translateY(-2px);
        }

        .btn-reset {
            background-color: #e0e0e0;
            color: var(--text-color);
        }

        .btn-reset:hover {
            background-color: #d0d0d0;
        }

        .btn-submit {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-submit:hover {
            background-color: #7c4dff;
        }

        @media (max-width: 640px) {
            .container {
                padding: 1rem;
            }

            .form-actions {
                flex-direction: column;
            }

            button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    
    <div class="container">
        <div class="card">
            <button onclick="goBack()" class="btn-back">‚Üê Go Back</button>
            <h1>Edit Coupon</h1>
            <form id="coupon-form">
                <div class="form-group">
                    <label for="code">Coupon Code*</label>
                    <input type="text" id="code" name="code" value='<%= coupon.code %>' required>
                    <div id="code-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="discountType">Discount Type*</label>
                    <select id="discountType" name="discountType" required>
                        <option value="">Select Discount Type</option>
                        <option value="fixed" <%= coupon.discountType === 'fixed' ? 'selected' : '' %>>Fixed Amount</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="minDiscountValue">Discount Value*</label>
                    <input type="number" id="minDiscountValue" name="minDiscountValue" min="0" step="0.01" value="<%= coupon.minDiscountValue %>" required>
                    <div id="minDiscount-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="expiryDate">Expiry Date*</label>
                    <input type="date" id="expiryDate" name="expiryDate" value="<%= coupon.expiryDate.toISOString().split('T')[0] %>" required>
                    <div id="date-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="usageLimit">Usage Limit</label>
                    <input type="number" id="usageLimit" name="usageLimit" min="1" value="<%= coupon.usageLimit %>">
                    <div id="limit-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="description">Description*</label>
                    <textarea id="description" name="description" required><%= coupon.description %></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="conditions">Conditions*</label>
                    <select id="conditions" name="conditions" required>
                        <option value="">Select Condition</option>
                        <option value="minimum_purchase" <%= coupon.conditions === 'minimum_purchase' ? 'selected' : '' %>>Minimum Purchase</option>
                        <option value="first_purchase" <%= coupon.conditions === 'first_purchase' ? 'selected' : '' %>>First Purchase</option>
                    </select>
                </div>

                <div class="form-group" id="minimumPurchaseGroup" style="display: <%= coupon.conditions === 'minimum_purchase' ? 'block' : 'none' %>">
                    <label for="minimumPurchaseAmount">Minimum Purchase Amount*</label>
                    <input type="number" id="minimumPurchaseAmount" name="minimumPurchaseAmount" min="0" step="0.01" value="<%= coupon.minPurchaseAmount || '' %>">
                    <div id="minPurchase-error" class="error-message"></div>
                </div>

                <div class="form-actions">
                    <button type="reset" class="btn-reset">Reset</button>
                    <button type="submit" class="btn-submit">Add Coupon</button>
                </div>
            </form>
        </div>
    </div>

   


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    

    <script>
       document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('coupon-form');
    const conditionsSelect = document.getElementById('conditions');
    const minimumPurchaseGroup = document.getElementById('minimumPurchaseGroup');

    // Handle conditions select change
    conditionsSelect.addEventListener('change', function() {
        minimumPurchaseGroup.style.display = this.value === 'minimum_purchase' ? 'block' : 'none';
    });

    // Add form submit event listener
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        let isValid = true; // Initialize isValid flag

        // Clear previous error messages
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(element => element.textContent = '');

        const couponCode = document.getElementById('code').value.trim();
        const discountType = document.getElementById('discountType').value;
        const minDiscountValue = document.getElementById('minDiscountValue').value;
        const expiryDate = document.getElementById('expiryDate').value;
        const usageLimit = document.getElementById('usageLimit').value || 1;
        const description = document.getElementById('description').value.trim();
        const conditions = document.getElementById('conditions').value;
        const minimumPurchaseAmount = document.getElementById('minimumPurchaseAmount').value || null;

        // Validation checks
        if(!couponCode) {
            displayErrorMessage('code-error', 'Coupon code is required');
            isValid = false;
        } else if(!/^[A-Za-z0-9\-]+$/.test(couponCode)) {
            displayErrorMessage('code-error', 'Coupon code can only contain letters, numbers, and hyphens.');
            isValid = false;
        } else if(couponCode.length < 5 || couponCode.length > 10) {
            displayErrorMessage('code-error', 'Coupon code must be between 5 and 10 characters.');
            isValid = false;
        }

        // Discount Value Validation
        if(isNaN(minDiscountValue) || minDiscountValue <= 0) {
            displayErrorMessage("minDiscount-error", 'Minimum discount value must be a valid positive number.');
            isValid = false;
        }

        // Expiration Date Validation
        if(!expiryDate) {
            displayErrorMessage('date-error', "Expiration Date is required");
            isValid = false;
        } else if(new Date(expiryDate) <= new Date()) {
            displayErrorMessage('date-error', 'Expiration date must be in the future.');
            isValid = false;
        }

        // Usage Limit Validation
        if(isNaN(usageLimit) || usageLimit < 1) {
            displayErrorMessage('limit-error', 'Usage limit must be a positive integer.');
            isValid = false;
        }

        // Description Validation
        if(description && !/^[^\s][A-Za-z0-9\s.,'()\-]+$/.test(description)) {
            displayErrorMessage('description-error', 'Description should not start with a space and can only contain letters, numbers, spaces, periods, commas, apostrophes, parentheses, and hyphens.');
            isValid = false;
        }

        // Minimum purchase amount validation
        if(conditions === 'minimum_purchase' && !minimumPurchaseAmount) {
            displayErrorMessage('minPurchase-error', 'Minimum purchase amount is required.');
            isValid = false;
        } else if(minimumPurchaseAmount && isNaN(minimumPurchaseAmount)) {
            displayErrorMessage('minPurchase-error', 'Minimum purchase amount must be a valid number.');
            isValid = false;
        }

        if(!isValid) {
            console.log('Form validation failed');
            return;
        }

        const formData = {
            code: couponCode,
            discountType,
            minDiscountValue,
            expiryDate,
            usageLimit,
            description,
            conditions,
            minimumPurchaseAmount
        };

        console.log(formData, "this is the form data");

        let couponId = '<%= coupon._id %>';

        // Show confirmation dialog and submit form
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to edit this coupon?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e53e3e',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, edit it!',
            cancelButtonText: 'Cancel',
        }).then(async(result) => {
            if(result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/editCoupons/${couponId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({formData})
                    });

                    if(!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'An error occurred');
                    }

                    const successData = await response.json();
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: successData.message,
                    }).then(() => {
                        window.location.href = '/admin/coupens';
                    });
                } catch (error) {
                    console.error('An error occurred while editing coupon...!', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops!',
                        text: error.message
                    });
                }
            }
        });
    });
});

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
}

function goBack() {
    window.history.back();
}
    </script>
        <%- include('../partials/admin/footer') %>

