<%- include('../partials/admin/header') %>
<style>
   
    /* Clean, Modern Form Styling */
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }

    .coupon-form-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .coupon-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-row {
        display: flex;
        gap: 1.5rem;
    }

    .form-group {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    label {
        color: #1a73e8;
        font-size: 0.9rem;
        font-weight: 500;
    }

    input, select, textarea {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #e1e1e1;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

    input:focus, select:focus, textarea:focus {
        outline: none;
        border-color: #1a73e8;
        box-shadow: 0 0 0 1px #1a73e8;
    }

    textarea {
        min-height: 100px;
        resize: vertical;
    }

    .error-message {
        color: #d93025;
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1rem;
    }

    .reset-btn, .submit-btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .reset-btn {
        background-color: #f1f3f4;
        color: #3c4043;
    }

    .reset-btn:hover {
        background-color: #e8eaed;
    }

    .submit-btn {
        background-color: #1a73e8;
        color: white;
    }

    .submit-btn:hover {
        background-color: #1557b0;
    }

    /* Add a title style matching the image */
    .coupon-form-container::before {
        content: "Add New Coupon";
        display: block;
        font-size: 1.5rem;
        font-weight: 500;
        color: #1a73e8;
        margin-bottom: 1.5rem;
    }

    /* Hide the minimum purchase group by default */
    #minimumPurchaseGroup {
        display: none;
    }

    /* Responsive adjustments */
    @media (max-width: 640px) {
        .form-row {
            flex-direction: column;
            gap: 1rem;
        }

        .coupon-form-container {
            margin: 1rem;
            padding: 1rem;
        }
    }

</style>

<div class="coupon-form-container">
    <form id="coupon-form" class="coupon-form">
        <!-- Coupon Code and Discount Type Row -->
        <div class="form-row">
            <div class="form-group">
                <label for="code">Coupon Code*</label>
                <input type="text" id="code" name="code" required>
                <span id="code-error" class="error-message"></span>
            </div>
            <div class="form-group">
                <label for="discountType">Discount Type*</label>
                <select id="discountType" name="discountType" required>
                    <option value="">Select Discount Type</option>  
                    <option value="fixed">Fixed Amount</option>
                </select>
            </div>
        </div>

        <!-- Discount Value Row -->
        <div class="form-row">
            <div class="form-group">
                <label for="minDiscountValue">Discount Value*</label>
                <input type="number" id="minDiscountValue" name="minDiscountValue" min="0" step="0.01" required>
                <span id="minDiscount-error" class="error-message"></span>
            </div>
        </div>

        <!-- Expiry Date and Usage Limit Row -->
        <div class="form-row">
            <div class="form-group">
                <label for="expiryDate">Expiry Date*</label>
                <input type="date" id="expiryDate" name="expiryDate" required>
                <span id="date-error" class="error-message"></span>
            </div>
            <div class="form-group">
                <label for="usageLimit">Usage Limit</label>
                <input type="number" id="usageLimit" name="usageLimit" min="1" value="1">
                <span id="limit-error" class="error-message"></span>
            </div>
        </div>

        <!-- Description Row -->
        <div class="form-row">
            <div class="form-group">
                <label for="description">Description*</label>
                <textarea id="description" name="description" required></textarea>
                <span id="description-error" class="error-message"></span>
            </div>
        </div>

        <!-- Conditions Row -->
        <div class="form-row">
            <div class="form-group">
                <label for="conditions">Conditions*</label>
                <select id="conditions" name="conditions" required>
                    <option value="">Select Condition</option>
                    <option value="minimum_purchase">Minimum Purchase</option>
                    <option value="first_purchase">First Purchase</option>
                </select>
            </div>
            <div class="form-group" id="minimumPurchaseGroup" style="display: none;">
                <label for="minimumPurchaseAmount">Minimum Purchase Amount*</label>
                <input type="number" id="minimumPurchaseAmount" name="minimumPurchaseAmount" min="0" step="0.01">
                <span id="minPurchase-error" class="error-message"></span>
            </div>
        </div>

        <!-- Form Actions -->
        <div class="form-actions">
            <button type="reset" class="reset-btn">Reset</button>
            <button type="submit" class="submit-btn">Add Coupon</button>
        </div>
    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('coupon-form');
        const conditionsSelect = document.getElementById('conditions');
        const minimumPurchaseGroup = document.getElementById('minimumPurchaseGroup');
        let isValid = true; // Track form validity
    
        conditionsSelect.addEventListener('change', function() {
            if (this.value === 'minimum_purchase') {
                minimumPurchaseGroup.style.display = 'block';
                document.getElementById('minimumPurchaseAmount').required = true;
            } else {
                minimumPurchaseGroup.style.display = 'none';
                document.getElementById('minimumPurchaseAmount').required = false;
            }
        });
    
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            isValid = true; // Reset validation state
    
            // Get form values
            const couponCode = document.getElementById('code').value.trim();
            const minDiscountValue = parseFloat(document.getElementById('minDiscountValue').value);
            const expiryDate = document.getElementById('expiryDate').value;
            const usageLimit = parseInt(document.getElementById('usageLimit').value, 10);
            const description = document.getElementById('description').value.trim();
            const minimumPurchaseAmount = document.getElementById('minimumPurchaseAmount').value;
    
            // Coupon Code Validation
            if (!couponCode) {
                displayErrorMessage('code-error', 'Coupon code is required.');
                isValid = false;
            } else if (!/^[A-Za-z0-9\-]+$/.test(couponCode)) {
                displayErrorMessage('code-error', 'Coupon code can only contain letters, numbers, and hyphens.');
                isValid = false;
            } else if (couponCode.length < 5 || couponCode.length > 10) {
                displayErrorMessage('code-error', 'Coupon code must be between 5 and 10 characters.');
                isValid = false;
            }
    
            // Discount Value Validation
            if (isNaN(minDiscountValue) || minDiscountValue <= 0) {
                displayErrorMessage('minDiscount-error', 'Minimum discount value must be a valid positive number.');
                isValid = false;
            }
            
    
            // Expiry Date Validation
            if (!expiryDate) {
                displayErrorMessage('date-error', 'Expiration date is required.');
                isValid = false;
            } else if (new Date(expiryDate) <= new Date()) {
                displayErrorMessage('date-error', 'Expiration date must be in the future.');
                isValid = false;
            }
    
            // Usage Limit Validation
            if (isNaN(usageLimit) || usageLimit < 1) {
                displayErrorMessage('limit-error', 'Usage limit must be a positive integer.');
                isValid = false;
            }
    
            // Description Validation
            if (description && !/^[^\s][A-Za-z0-9\s.,'()\-]+$/.test(description)) {
                displayErrorMessage('description-error', 'Description should not start with a space and can only contain letters, numbers, spaces, periods, commas, apostrophes, parentheses, and hyphens.');
                isValid = false;
            }
    
            // Minimum Purchase Amount Validation (If applicable)
            if (conditionsSelect.value === 'minimum_purchase' && !minimumPurchaseAmount) {
                displayErrorMessage('minimumPurchaseAmount-error', 'Minimum purchase amount is required.');
                isValid = false;
            } else if (minimumPurchaseAmount && isNaN(minimumPurchaseAmount)) {
                displayErrorMessage('minimumPurchaseAmount-error', 'Minimum purchase amount must be a valid number.');
                isValid = false;
            }
    
            // If validation fails, stop form submission
            if (!isValid) return;
    
            // Collect form data
            const formData = new FormData(form);
            const couponData = Object.fromEntries(formData.entries());
            // couponData.isActive = form.isActive.checked;
    
            // Remove minimumPurchaseAmount if not selected
            if (couponData.conditions !== 'minimum_purchase') {
                delete couponData.minimumPurchaseAmount;
            }
    
            try {
                const response = await fetch('/admin/addcoupen', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(couponData )
                });
    
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'An error occurred adding coupon!');
                }
    
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Coupon added successfully.',
                    confirmButtonColor: '#48bb78',
                }).then(() => {
                    window.location.href = '/admin/coupens';
                });
    
            } catch (error) {
                console.error('An error occurred while adding new coupon', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops!',
                    text: error.message,
                    confirmButtonColor: '#e53e3e',
                });
            }
        });
    });
    
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
    

</script>
<%- include('../partials/admin/footer') %>
