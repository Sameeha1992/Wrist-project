<%- include("../../views/partials/admin/header") %>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            gap: 1rem;
            padding: 1rem 0;
        }
        .thumbnail {
            flex: 0 0 auto;
            max-width: 100px;
        }
        .error-message {
            display: none;
        }
    </style>
</head>
<section class="content-main py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-9">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h2 class="card-title mb-4">Edit Product</h2>
                        <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">
                            <div class="mb-3">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" name="productName" value="<%=product.productName%>" class="form-control" id="product_name">
                                <div id="productName-error" class="error-message text-danger"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand">
                                        <%for(let i=0;i<brand.length;i++){ %>
                                        <option value="<%=brand[i]._id %>"<%= brand[i]._id.toString()===product.brand._id.toString() ? 'selected':'' %>>
                                            <%= brand[i].brandName%>

                                        </option>
                                        <% } %>
                                    </select>
                                    <div id="brand-error" class="error-message text-danger"></div>
                                </div>
                                <div class="col-md-6">
                                    <label for="category"class="form-label">Category</label>
                                    <select class="form-select" id="category" name="category">
                                        <%for(let i=0 ;i<cat.length;i++){%>
                                            <option value="<%= cat[i]._id %>" <%= cat[i]._id.toString() === product.category._id.toString() ? 'selected' : '' %>>
                                                <%= cat[i].name %></option>

                                        <% } %>
                                    </select>
                                    
                                    <div id="category-error" class="error-message text-danger"></div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Full description</label>
                                <textarea name="descriptionData" class="form-control" rows="4"><%= product.description %></textarea>

                                <div id="description-error" class="error-message text-danger"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label class="form-label">Regular price</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input name="regularPrice" type="text" value="<%=product.regularPrice%>" class="form-control">
                                    </div>
                                    <div id="regularPrice-error" class="error-message text-danger"></div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Sale price</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input name="salePrice" type="text" value="<%=product.salePrice%>" class="form-control">
                                    </div>
                                    <div id="salePrice-error" class="error-message text-danger"></div>
                                </div>

                                <!-- color stock adding -->

                                <!-- Add this right before the Product Images section -->
<div class="card mb-4">
    <div class="card-header bg-light">
        <h5 class="mb-0">Color Stock</h5>
    </div>
    <div class="card-body">
        <div id="colorStockContainer">
            <% product.colorStock.forEach((stock,index)=> {%>
            <div class="color-stock-entry mb-3">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label for="color-<%= index %>" class="form-label">Color*</label>
                        <select name="colorStock[<%= index %>][color]" id="color-<%= index %>" class="form-select" required>
                            <option value="">Select Color</option>
                            <option value="red" <%= stock.color === 'red' ? 'selected' : '' %>>Red</option>
                            <option value="blue" <%= stock.color === 'blue' ? 'selected' : '' %>>Blue</option>
                            <option value="black" <%= stock.color === 'black' ? 'selected' : '' %>>Black</option>
                            <option value="white" <%= stock.color === 'white' ? 'selected' : '' %>>White</option>
                            <option value="pink" <%= stock.color === 'pink' ? 'selected' : '' %>>Pink</option>
                            
                            
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="quantity-<%= index %>" class="form-label">Quantities</label>
                        <input type="number" id="quantity-<%= index %>"name="colorStock[<%= index %>][quantity]" class="form-control" min="0" required value="<%= stock.quantity %>">
                       
                        <div id="productQuantity-error-<%= index %>" class="error-message"></div>
                    </div>
                    <div class="col-md-4">
                        <label for="status-<%= index %>" class="form-label">Status*</label>
                        <select id="status-<%= index %>" name="colorStock[<%= index %>][status]" class="form-select" required>

                        <option value="Available" <%= stock.status === 'Available' ? 'selected' : '' %>>Available</option>
                        <option value="Out of stock" <%= stock.status === '"Out of Stock"' ? 'selected' : '' %>>Out of stock</option>
                        <option value="Discontinued" <%= stock.status === 'Discontinued' ? 'selected' : '' %>>Discontinued</option>
                        </select>
                    </div>
                </div>

                
                  <button type="button" class="btn btn-danger mt-2 remove-color-stock">Remove</button>
                
            </div>
            <% }); %>
        </div>
        <button type="button" class="btn btn-success mt-3" id="addColorStock">
            Add Another Color Stock
        </button>
    </div>
</div>

<!-- Update the Product Images section to match the style -->
<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Product Images</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <input type="file" id="imageInput" name="images" class="form-control" multiple>
            </div>
        </div>
        <div class="thumbnails-container mt-3" id="addedImagesContainer">
            <% for (let i = 0; i < product.productImage.length; i++) { %>
                <div class="thumbnail position-relative d-inline-block me-2 mb-2">
                    <img src="/uploads/re-image/<%= product.productImage[i] %>" alt="Image" 
                         id="imgView" class="img-thumbnail" style="width: 100px; height: 100px; object-fit: cover;">
                    <button type="submit" class="btn-close position-absolute top-0 end-0 m-1" 
                            onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')" 
                            aria-label="Delete"></button>
                    <input  type="hidden" name="images" value="<%= product.productImage[i] %>">
                </div>
            <% } %>
        </div>
    </div>
</div>
                           

                                    

                                    

                                    <div id="images-error" class="error-message text-danger"></div>
                                </div>
                            </div>
                            <div class="text-end">
                                <button class="btn btn-primary" id="updatebtn" type="button" onclick="return validateAndSubmit()">Update</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.js"></script>

    
<script>


document.getElementById('addColorStock').addEventListener('click', function () {
    const container = document.getElementById('colorStockContainer');
    const index = container.children.length;

    const newEntry = `
        <div class="color-stock-entry mb-3">
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="color-${index}" class="form-label">Color*</label>
                    <select name="colorStock[${index}][color]" id="color-${index}" class="form-select" required>
                        <option value="">Select Color</option>
                        <option value="red">Red</option>
                        <option value="blue">Blue</option>
                        <option value="black">Black</option>
                        <option value="white">White</option>
                        <option value="pink">Pink</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="quantity-${index}" class="form-label">Quantities</label>
                    <input type="number" id="quantity-${index}" name="colorStock[${index}][quantity]" class="form-control" min="0" required>
                    <div id="quantity-error-${index}" class="error-message text-danger"></div>
                </div>
                <div class="col-md-4">
                    <label for="status-${index}" class="form-label">Status*</label>
                    <select id="status-${index}" name="colorStock[${index}][status]" class="form-select" required>
                        <option value="Available">Available</option>
                        <option value="Out of stock">Out of stock</option>
                        <option value="Discontinued">Discontinued</option>
                    </select>
                </div>
            </div>
            <button type="button" class="btn btn-danger mt-2 remove-color-stock">Remove</button>
        </div>`;
        container.insertAdjacentHTML('beforeend', newEntry);

 // Add event listener to the newly created remove button
 const removeButton = container.lastElementChild.querySelector('.remove-color-stock');
    removeButton.addEventListener('click', function() {
        const colorStockEntry = this.closest('.color-stock-entry');
        if (colorStockEntry) {
            colorStockEntry.remove();
        } else {
            console.error('Color stock entry not found');
        }
    });
});

// Event delegation for existing entries
document.getElementById('colorStockContainer').addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-color-stock')) {
        const colorStockEntry = e.target.closest('.color-stock-entry');
        if (colorStockEntry) {
            colorStockEntry.remove();
        } else {
            console.error('Color stock entry not found');
        }
    }
});


    function validateAndSubmit() {
        if (validateForm()) {
            document.forms[0].submit();
        }
    }

    function deleteSingleImage(imageId, productId) {
        $.ajax({
            url: "/admin/deleteImage",
            method: "POST",
            data: {
                imageNameToServer: imageId,
                productIdToServer: productId
            },
            success: (response) => {
                if (response.status === true) {
                    window.location.reload();
                }
            }
        });
    }

    
    function viewImage1(event) {
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage2(event) {
        document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage3(event) {
        document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage4(event) {
        document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage(event, index) {
        const input = event.target;
        const reader = new FileReader();
        
        reader.onload = function() {
            const dataURL = reader.result;
            const image = document.getElementById('imgView' + index);
            image.src = dataURL;

            const cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });

            const cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
            cropperContainer.style.display = 'block';

            const saveButton = document.querySelector('#saveButton' + index);
            saveButton.addEventListener('click', async function() {
                const croppedCanvas = cropper.getCroppedCanvas();
                const croppedImage = document.getElementById("croppedImg" + index);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                const timestamp = new Date().getTime();
                const fileName = `cropped-img-${timestamp}-${index}.png`;
                
                await croppedCanvas.toBlob(blob => {
                    const imgFile = new File([blob], fileName, blob);
                    const fileList = new DataTransfer();
                    fileList.items.add(imgFile);
                    input.files = fileList.files;
                });

                cropperContainer.style.display = 'none';
            });
        };
        
        reader.readAsDataURL(input.files[0]);
    }


    const selectedImages = [];
document.getElementById("imageInput").addEventListener("change", handleFileSelect);

function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    

    const files = event.target.files;
    // Limit to 5 images
    if (files.length > 5) {
        displayErrorMessage("images-error", "Maximum 5 images allowed");
        event.target.value = ''; // Clear the file input
        return;
    }

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // Check file type
        const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
        if (!validTypes.includes(file.type)) {
            displayErrorMessage("images-error", "Only JPEG, PNG, and WebP images are allowed");
            event.target.value = ''; // Clear the file input
            return;
        }

        // Check file size (5MB limit)
        if (file.size > 5 * 1024 * 1024) {
            displayErrorMessage("images-error", "Image size should not exceed 5MB");
            event.target.value = ''; // Clear the file input
            return;
        }

       

        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail", "position-relative", "d-inline-block", "me-2", "mb-2");

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.classList.add("img-thumbnail");
        img.style.width = "100px";
        img.style.height = "100px";
        img.style.objectFit = "cover";

        const removeIcon = document.createElement("button");
        removeIcon.classList.add("btn-close", "position-absolute", "top-0", "end-0", "m-1");
        removeIcon.setAttribute("aria-label", "Delete");
        removeIcon.addEventListener("click", function() {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
            thumbnail.remove();
        });

        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
    }
}

function validateAndSubmit() {
    if (validateForm()) {
        document.forms[0].submit();
    }
}

function validateForm() {
    // Clear previous error messages
    clearErrorMessages();

    // Validate Product Name
    const name = document.getElementById('product_name').value.trim();
    if (!name) {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        return false;
    }

    // Validate Description
    const description = document.querySelector('textarea[name="descriptionData"]').value.trim();
    if (!description) {
        displayErrorMessage('description-error', 'Please enter a product description.');
        return false;
    }

    // Validate Brand
    const brand = document.querySelector('select[name="brand"]').value;
    if (!brand) {
        displayErrorMessage('brand-error', 'Please select a brand.');
        return false;
    }

    // Validate Category
    const category = document.querySelector('select[name="category"]').value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        return false;
    }

    // Validate Regular Price
    const regularPrice = document.querySelector('input[name="regularPrice"]').value.trim();
    if (!/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price.');
        return false;
    }

    // Validate Sale Price
    const salePrice = document.querySelector('input[name="salePrice"]').value.trim();
    if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
        return false;
    }

    // Validate Sale Price is not higher than Regular Price
    if (parseFloat(salePrice) > parseFloat(regularPrice)) {
        displayErrorMessage('salePrice-error', 'Sale price cannot exceed regular price.');
        return false;
    }

    // Validate Color Stock
    const colorStockContainer = document.getElementById('colorStockContainer');
    const colorStockEntries = colorStockContainer.querySelectorAll('.color-stock-entry');
    
    if (colorStockEntries.length === 0) {
        displayErrorMessage('colorStock-error', 'Please add at least one color stock entry.');
        return false;
    }

    // Validate each color stock entry
    const usedColors = new Set();
    colorStockEntries.forEach((entry, index) => {
        const colorSelect = entry.querySelector(`select[name="colorStock[${index}][color]"]`);
        const quantityInput = entry.querySelector(`input[name="colorStock[${index}][quantity]"]`);
        const statusSelect = entry.querySelector(`select[name="colorStock[${index}][status]"]`);

        // Validate color
        if (!colorSelect.value) {
            displayErrorMessage(`color-error-${index}`, 'Please select a color.');
            return false;
        }

        // Check for duplicate colors
        if (usedColors.has(colorSelect.value)) {
            displayErrorMessage(`color-error-${index}`, 'Duplicate color selected.');
            return false;
        }
        usedColors.add(colorSelect.value);

        // Validate quantity
        const quantity = parseInt(quantityInput.value);
        if (isNaN(quantity) || quantity < 0) {
            displayErrorMessage(`quantity-error-${index}`, 'Please enter a valid non-negative quantity.');
            return false;
        }

        // Validate status
        if (!statusSelect.value) {
            displayErrorMessage(`status-error-${index}`, 'Please select a status.');
            return false;
        }
    });

    // Optional: Validate images if new images are being added
    const imageInput = document.getElementById('imageInput');
    if (imageInput.files.length > 5) {
        displayErrorMessage('images-error', 'Maximum 5 images allowed.');
        return false;
    }

    return true;
}

function clearErrorMessages() {
    document.querySelectorAll('.error-message').forEach((el) => {
        el.textContent = '';
        el.style.display = 'none';
    });
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
}

// Event listener for update button
document.getElementById('updatebtn').addEventListener('click', function(e) {
    e.preventDefault();
    validateAndSubmit();
});
</script>
    